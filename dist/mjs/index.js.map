{"version":3,"file":"index.js","names":["_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","map","require","sortingAlgorithm","arr","comparison","arguments","undefined","x","_ref","_ref$order","order","_ref$persist","persist","type","concat","array","sorting","sort","module","exports"],"sources":["../../src/index.js"],"sourcesContent":["'use-strict'\nconst map = require('./service/map.js')\n\n/**\n * \n * @param {array} arr Array that will be sorted\n * @param {function} comparison A function that defines the sort order. Should return a number.\n * @param {object} option Option that contain order, type, and persist\n * @param {string} option.order asc (Default) || desc\n * @param {string} option.type bubble || selection || insertion \n * @param {boolean} option.persist Set true if you want to modified the original value\n * @returns {array} Return sorted Array\n * This function accept 3 parameters array [], comparison (), option {}\n * \n * In the option object there is 3 key order, type, persist\n * \n * order - asc (Default) || desc\n * \n * type - bubble || selection || insertion || quick || count\n * \n * persist - Set true if you want to modified the original value\n */\nfunction sortingAlgorithm(arr, comparison = ((x)=>x), {order = 'asc', persist = false, type}){\n    if(typeof comparison !== 'function') throw 'function comparison must be a function';\n    if(!map[type]) {throw `${type} is unknown type. please use either one of this \n    bubble || selection || insertion || quick || count`;}\n\n    const array = persist? arr : [...arr];\n    const sorting = new map[type](array,comparison)\n    return sorting.sort(order)\n}\n\nmodule.exports =  sortingAlgorithm; "],"mappings":";AAAA,YAAY;;AAAA,SAAAA,mBAAAC,CAAA,WAAAC,kBAAA,CAAAD,CAAA,KAAAE,gBAAA,CAAAF,CAAA,KAAAG,2BAAA,CAAAH,CAAA,KAAAI,kBAAA;AAAA,SAAAA,mBAAA,cAAAC,SAAA;AAAA,SAAAF,4BAAAH,CAAA,EAAAM,CAAA,QAAAN,CAAA,2BAAAA,CAAA,SAAAO,iBAAA,CAAAP,CAAA,EAAAM,CAAA,OAAAE,CAAA,MAAAC,QAAA,CAAAC,IAAA,CAAAV,CAAA,EAAAW,KAAA,6BAAAH,CAAA,IAAAR,CAAA,CAAAY,WAAA,KAAAJ,CAAA,GAAAR,CAAA,CAAAY,WAAA,CAAAC,IAAA,aAAAL,CAAA,cAAAA,CAAA,GAAAM,KAAA,CAAAC,IAAA,CAAAf,CAAA,oBAAAQ,CAAA,+CAAAQ,IAAA,CAAAR,CAAA,IAAAD,iBAAA,CAAAP,CAAA,EAAAM,CAAA;AAAA,SAAAJ,iBAAAF,CAAA,8BAAAiB,MAAA,YAAAjB,CAAA,CAAAiB,MAAA,CAAAC,QAAA,aAAAlB,CAAA,uBAAAc,KAAA,CAAAC,IAAA,CAAAf,CAAA;AAAA,SAAAC,mBAAAD,CAAA,QAAAc,KAAA,CAAAK,OAAA,CAAAnB,CAAA,UAAAO,iBAAA,CAAAP,CAAA;AAAA,SAAAO,kBAAAP,CAAA,EAAAM,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAN,CAAA,CAAAoB,MAAA,MAAAd,CAAA,GAAAN,CAAA,CAAAoB,MAAA,YAAAC,CAAA,MAAAC,CAAA,GAAAR,KAAA,CAAAR,CAAA,GAAAe,CAAA,GAAAf,CAAA,EAAAe,CAAA,IAAAC,CAAA,CAAAD,CAAA,IAAArB,CAAA,CAAAqB,CAAA,UAAAC,CAAA;AACZ,IAAMC,GAAG,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,GAAG,EAAgE;EAAA,IAA9DC,UAAU,GAAAC,SAAA,CAAAR,MAAA,QAAAQ,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAI,UAACE,CAAC;IAAA,OAAGA,CAAC;EAAA;EAAA,IAAAC,IAAA,GAAAH,SAAA,CAAAR,MAAA,OAAAQ,SAAA,MAAAC,SAAA;IAAAG,UAAA,GAAAD,IAAA,CAAIE,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,KAAK,GAAAA,UAAA;IAAAE,YAAA,GAAAH,IAAA,CAAEI,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,KAAK,GAAAA,YAAA;IAAEE,IAAI,GAAAL,IAAA,CAAJK,IAAI;EACvF,IAAG,OAAOT,UAAU,KAAK,UAAU,EAAE,MAAM,wCAAwC;EACnF,IAAG,CAACJ,GAAG,CAACa,IAAI,CAAC,EAAE;IAAC,SAAAC,MAAA,CAASD,IAAI;EACuB;EAEpD,IAAME,KAAK,GAAGH,OAAO,GAAET,GAAG,GAAA3B,kBAAA,CAAO2B,GAAG,CAAC;EACrC,IAAMa,OAAO,GAAG,IAAIhB,GAAG,CAACa,IAAI,CAAC,CAACE,KAAK,EAACX,UAAU,CAAC;EAC/C,OAAOY,OAAO,CAACC,IAAI,CAACP,KAAK,CAAC;AAC9B;AAEAQ,MAAM,CAACC,OAAO,GAAIjB,gBAAgB","ignoreList":[]}